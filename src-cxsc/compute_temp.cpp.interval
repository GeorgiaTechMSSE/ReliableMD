/* ----------------------------------------------------------------------
   LAMMPS - Large-scale Atomic/Molecular Massively Parallel Simulator
   http://lammps.sandia.gov, Sandia National Laboratories
   Steve Plimpton, sjplimp@sandia.gov

   Copyright (2003) Sandia Corporation.  Under the terms of Contract
   DE-AC04-94AL85000 with Sandia Corporation, the U.S. Government retains
   certain rights in this software.  This software is distributed under
   the GNU General Public License.

   See the README file in the top-level LAMMPS directory.
------------------------------------------------------------------------- */

#include "mpi.h"
#include "string.h"
#include "compute_temp.h"
#include "atom.h"
#include "update.h"
#include "force.h"
#include "domain.h"
#include "group.h"
#include "error.h"
#include "math_extra.h"
// AT: add CXSC-lib
// #include "imatrix.hpp" // unnecessary
#include "ivector.hpp"
#include "interval.hpp"

using namespace LAMMPS_NS;

/* ---------------------------------------------------------------------- */

ComputeTemp::ComputeTemp(LAMMPS *lmp, int narg, char **arg) :
  Compute(lmp, narg, arg)
{
  if (narg != 3) error->all(FLERR,"Illegal compute temp command");

  scalar_flag = vector_flag = 1;
  size_vector = 6;
  extscalar = 0;
  extvector = 1;
  tempflag = 1;

  vector = new double[6];
  vectorrad = new double[6]; // add rad
  vector_ub = new double[6]; // add rad
  vector_lb = new double[6]; // add rad
}

/* ---------------------------------------------------------------------- */

ComputeTemp::~ComputeTemp()
{
  delete [] vector;
  delete [] vectorrad; // add rad
  delete [] vector_ub; // add rad
  delete [] vector_lb; // add rad
}

/* ---------------------------------------------------------------------- */

void ComputeTemp::setup()
{
  fix_dof = -1;
  dof_compute();
}

/* ---------------------------------------------------------------------- */

void ComputeTemp::dof_compute()
{
  if (fix_dof) adjust_dof_fix();
  double natoms = group->count(igroup);
  dof = domain->dimension * natoms;
  dof -= extra_dof + fix_dof;
  if (dof > 0.0) tfactor = force->mvv2e / (dof * force->boltz);
  else tfactor = 0.0;
}

/* ---------------------------------------------------------------------- */

double ComputeTemp::compute_scalar()
{
  invoked_scalar = update->ntimestep;

  double **v = atom->v;
  double *mass = atom->mass;
  double *rmass = atom->rmass;
  int *type = atom->type;
  int *mask = atom->mask;
  int nlocal = atom->nlocal;

  double t = 0.0;

  if (rmass) {
    for (int i = 0; i < nlocal; i++)
      if (mask[i] & groupbit)
        t += (v[i][0]*v[i][0] + v[i][1]*v[i][1] + v[i][2]*v[i][2]) * rmass[i];
  } else {
    for (int i = 0; i < nlocal; i++)
      if (mask[i] & groupbit)
        t += (v[i][0]*v[i][0] + v[i][1]*v[i][1] + v[i][2]*v[i][2]) *
          mass[type[i]];
  }

  MPI_Allreduce(&t,&scalar,1,MPI_DOUBLE,MPI_SUM,world);
  if (dynamic) dof_compute();
  scalar *= tfactor;
  return scalar;
}
/* ---------------------------------------------------------------------- */
// compute temperature upperbound
/* ---------------------------------------------------------------------- */

double ComputeTemp::compute_scalar_ub()
{
  invoked_scalar = update->ntimestep;

  double **vub = atom->vub;
  double *mass = atom->mass;
  double *rmass = atom->rmass;
  int *type = atom->type;
  int *mask = atom->mask;
  int nlocal = atom->nlocal;

  double t_ub = 0.0;

  if (rmass) {
    for (int i = 0; i < nlocal; i++)
      if (mask[i] & groupbit)
        t_ub += (vub[i][0]*vub[i][0] + vub[i][1]*vub[i][1] + vub[i][2]*vub[i][2]) * rmass[i];
  } else {
    for (int i = 0; i < nlocal; i++)
      if (mask[i] & groupbit)
        t_ub += (vub[i][0]*vub[i][0] + vub[i][1]*vub[i][1] + vub[i][2]*vub[i][2]) *
          mass[type[i]];
  }

  MPI_Allreduce(&t_ub,&scalar_ub,1,MPI_DOUBLE,MPI_SUM,world);
  if (dynamic) dof_compute();
  scalar_ub *= tfactor;
  return scalar_ub;
}

/* ---------------------------------------------------------------------- */
// compute temperature lowerbound
/* ---------------------------------------------------------------------- */

double ComputeTemp::compute_scalar_lb()
{
  invoked_scalar = update->ntimestep;

  double **vlb = atom->vlb;
  double *mass = atom->mass;
  double *rmass = atom->rmass;
  int *type = atom->type;
  int *mask = atom->mask;
  int nlocal = atom->nlocal;

  double t_lb = 0.0;

  if (rmass) {
    for (int i = 0; i < nlocal; i++)
      if (mask[i] & groupbit)
        t_lb += (vlb[i][0]*vlb[i][0] + vlb[i][1]*vlb[i][1] + vlb[i][2]*vlb[i][2]) * rmass[i];
  } else {
    for (int i = 0; i < nlocal; i++)
      if (mask[i] & groupbit)
        t_lb += (vlb[i][0]*vlb[i][0] + vlb[i][1]*vlb[i][1] + vlb[i][2]*vlb[i][2]) *
          mass[type[i]];
  }

  MPI_Allreduce(&t_lb,&scalar_lb,1,MPI_DOUBLE,MPI_SUM,world);
  if (dynamic) dof_compute();
  scalar_lb *= tfactor;
  return scalar_lb;
}

/* ---------------------------------------------------------------------- */

void ComputeTemp::compute_vector()
{
  int i;
  invoked_vector = update->ntimestep;

  double **v    = atom->v;
  double **vrad = atom->vrad;
  double **vub  = atom->vub;
  double **vlb  = atom->vlb;
  double *mass  = atom->mass;
  double *rmass = atom->rmass;
  int *type = atom->type;
  int *mask = atom->mask;
  int nlocal = atom->nlocal;

  double massone,t[6];
  double trad[6]; // add rad
  double tub[6];  // add rad
  double tlb[6];  // add rad

  ivector_t = new ivector[6]; for (int i = 0; i++; i < 6) Resize(ivector_t[i],1); // add ivector

  for (i = 0; i < 6; i++) {
    t[i] = 0.0;
    trad[i] = 0.0; // add rad
    tub[i]  = 0.0; // add rad
    tlb[i]  = 0.0; // add rad
  }

  for (i = 0; i < nlocal; i++)
    if (mask[i] & groupbit) {
      if (rmass) massone = rmass[i];
      else massone = mass[type[i]];
      t[0] += massone * v[i][0]*v[i][0];
      t[1] += massone * v[i][1]*v[i][1];
      t[2] += massone * v[i][2]*v[i][2];
      t[3] += massone * v[i][0]*v[i][1];
      t[4] += massone * v[i][0]*v[i][2];
      t[5] += massone * v[i][1]*v[i][2];
      // begin debug
      // for (int k = 0; k < 3; k++) {
      //   std::cout << "v["   << i << "][" << k << "] = " << v[i][k]    << std::endl;
      //   std::cout << "vub[" << i << "][" << k << "] = " << vub[i][k]  << std::endl;
      //   std::cout << "vlb[" << i << "][" << k << "] = " << vlb[i][k]  << std::endl;
      // }
      // end debug - vub = vlb = 0 for all atoms- BUG
      /* ---------------------------------- */
      // add rad
      // NOTE: omit the vrad*vrad part when calculating the 
      // new interval rad because that part (vrad*vrad) belongs
      // to interval mid rather than interval rad

      // std::cout << "atom->vrad_flag = " << atom->vrad_flag << std::endl; // make sure vrad_flag is 1 - yes
      if (atom->vrad_flag) {
        /* ---------------------------------------------------------------------------------------------- */
        // version 1 - mixed classical/Kaucher arithmetics
        /*trad[0] += massone * ( 2 * v[i][0]*vrad[i][0] + vrad[i][0]*vrad[i][0] );
        trad[1] += massone * ( 2 * v[i][1]*vrad[i][1] + vrad[i][1]*vrad[i][1] );
        trad[2] += massone * ( 2 * v[i][2]*vrad[i][2] + vrad[i][2]*vrad[i][2] );
        trad[3] += massone * ( 2 * v[i][0]*vrad[i][1] + vrad[i][0]*vrad[i][1] );
        trad[4] += massone * ( 2 * v[i][0]*vrad[i][2] + vrad[i][0]*vrad[i][2] );
        trad[5] += massone * ( 2 * v[i][1]*vrad[i][2] + vrad[i][1]*vrad[i][2] );*/
        /* ---------------------------------------------------------------------------------------------- */
        // version 2 - Kaucher arithmetics
        // trad[0] += massone * MathExtra::rad_DoubleMult(v[i][0],vrad[i][0],v[i][0],vrad[i][0]);
        // trad[1] += massone * MathExtra::rad_DoubleMult(v[i][1],vrad[i][1],v[i][1],vrad[i][1]);
        // trad[2] += massone * MathExtra::rad_DoubleMult(v[i][2],vrad[i][2],v[i][2],vrad[i][2]);
        // trad[3] += massone * MathExtra::rad_DoubleMult(v[i][0],vrad[i][0],v[i][1],vrad[i][1]);
        // trad[4] += massone * MathExtra::rad_DoubleMult(v[i][0],vrad[i][0],v[i][2],vrad[i][2]);
        // trad[5] += massone * MathExtra::rad_DoubleMult(v[i][1],vrad[i][1],v[i][2],vrad[i][2]);
        /* ---------------------------------------------------------------------------------------------- */
        // version 3 - assuming in NVT temperature unchanged
        trad[0] += 0.0;
        trad[1] += 0.0;
        trad[2] += 0.0;
        trad[3] += 0.0;
        trad[4] += 0.0;
        trad[5] += 0.0;
        /* ---------------------------------------------------------------------------------------------- */
        // .v3 external implementation - ub and lb
        // tub[0] += massone * vub[i][0] * vub[i][0];
        // tub[1] += massone * vub[i][1] * vub[i][1];
        // tub[2] += massone * vub[i][2] * vub[i][2];
        // tub[3] += massone * vub[i][0] * vub[i][1];
        // tub[4] += massone * vub[i][0] * vub[i][2];
        // tub[5] += massone * vub[i][1] * vub[i][2];

        // tlb[0] += massone * vlb[i][0] * vlb[i][0];
        // tlb[1] += massone * vlb[i][1] * vlb[i][1];
        // tlb[2] += massone * vlb[i][2] * vlb[i][2];
        // tlb[3] += massone * vlb[i][0] * vlb[i][1];
        // tlb[4] += massone * vlb[i][0] * vlb[i][2];
        // tlb[5] += massone * vlb[i][1] * vlb[i][2];

        /* ---------------------------------------------------------------------------------------------- */
        tub[0] += massone * vub[i][0] * vub[i][0];
        tub[1] += massone * vub[i][1] * vub[i][1];
        tub[2] += massone * vub[i][2] * vub[i][2];
        tub[3] += massone * vub[i][0] * vub[i][1];
        tub[4] += massone * vub[i][0] * vub[i][2];
        tub[5] += massone * vub[i][1] * vub[i][2];

        tlb[0] += massone * vlb[i][0] * vlb[i][0];
        tlb[1] += massone * vlb[i][1] * vlb[i][1];
        tlb[2] += massone * vlb[i][2] * vlb[i][2];
        tlb[3] += massone * vlb[i][0] * vlb[i][1];
        tlb[4] += massone * vlb[i][0] * vlb[i][2];
        tlb[5] += massone * vlb[i][1] * vlb[i][2];

        // begin debug
        // vub and vlb = 0 
        // for (int k = 0; k < 3; k++) {
        //         std::cout << "v["   << i << "][" << k << "] = " << v[i][k]    << std::endl;
        //         std::cout << "vub[" << i << "][" << k << "] = " << vub[i][k]  << std::endl;
        //         std::cout << "vlb[" << i << "][" << k << "] = " << vlb[i][k]  << std::endl;
        // }
        // end debug - vub = vlb = 0 for all atoms- BUG

      }
        // begin debug
        // status: losing some accuracy
        // if (update->ntimestep > 10){
        //   for (int k = 0; k < 6; k++) {
        //     std::cout << "t["   << k << "] = " << t[k]   << std::endl;
        //     std::cout << "tub[" << k << "] = " << tub[k] << std::endl;
        //     std::cout << "tlb[" << k << "] = " << tlb[k] << std::endl;
        //   }
        // }
        // end debug
      /* ---------------------------------------------------------------------------------------------- */
    }
  // std::cout << "fix here" << std::endl;
  MPI_Allreduce(t,vector,6,MPI_DOUBLE,MPI_SUM,world);
  // add rad
  if (atom->vrad_flag) {
    MPI_Allreduce(trad,vectorrad,6,MPI_DOUBLE,MPI_SUM,world);
    MPI_Allreduce(tub,vector_ub,6,MPI_DOUBLE,MPI_SUM,world);
    MPI_Allreduce(tlb,vector_lb,6,MPI_DOUBLE,MPI_SUM,world);
  }
  
  for (i = 0; i < 6; i++) {
    vector[i] *= force->mvv2e;
    // begin debug
    // std::cout << "vector[" << i << "] = " << vector[i] << std::endl;
    // end debug
    if (atom->xrad_flag && atom->vrad_flag && atom->frad_flag) {
      vectorrad[i] *= force->mvv2e;   // add rad
      vector_ub[i] *= force->mvv2e;   // add rad
      vector_lb[i] *= force->mvv2e;   // add rad
      
      // begin debug
      // status: no - vector _ub and _lb all = 0 -- waiting for fixing fix_nh.cpp, update vub vlb calculation
      // std::cout << "vectorrad[" << i << "] = " << vectorrad[i] << std::endl;
      // std::cout << "vector_ub[" << i << "] = " << vector_ub[i] << std::endl;
      // std::cout << "vector_lb[" << i << "] = " << vector_lb[i] << std::endl;
      // std::cout << "vector["    << i << "] = " << vector[i] << std::endl;
      // end debug
    }
  }
  // begin debug - check vector, vector_ub, vector_lb are the same if the error in potential = 0
  // for (int k = 0; k < 6; k++) {
  //   std::cout << "vector["    << k << "] = " << vector[k]     << std::endl;
  //   std::cout << "vector_ub[" << k << "] = " << vector_ub[k]  << std::endl;
  //   std::cout << "vector_lb[" << k << "] = " << vector_lb[k]  << std::endl;
  // }
  // end debug

  delete interval_t;
}
