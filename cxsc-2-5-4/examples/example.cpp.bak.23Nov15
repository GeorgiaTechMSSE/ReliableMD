// #include "example.hpp"
#include "real.hpp"
#include "imatrix.hpp"
#include "ivector.hpp"
#include "interval.hpp"  // predefined interval arithmetic
#include "rvector.hpp"
#include "l_interval.hpp"
#include <iostream>
using namespace cxsc;
using namespace std;

int main()
{
  cout << endl;
  ivector ivector_z(7);  
  int flag = 1;
  for (int j = 0; j < 7; j++) {
    // Resize(ivector_z[j],1);
    ivector_z[j+1] = interval(3*j,-2*j);
    cout << "ivector[" << j+1 << "] = " << ivector_z[j+1] << endl;
    cout << "1A. size of ivector_z = " << VecLen(ivector_z) << endl;
  }  
  cout << endl;  
  cout << "1B. size of ivector_z = " << VecLen(ivector_z) << endl;
  cout << "Lb(ivector_z) = " << Lb(ivector_z) << endl;
  cout << "Ub(ivector_z) = " << Ub(ivector_z) << endl;
  // ********************************************************************************************
  /* // test construct/destruct ivector
  cout << endl;
  ivector* x_ivector;
  x_ivector = new ivector[7];
  // cout << "length of x_ivector (after defined) = " << VecLen(*x_ivector) << endl;
  for (int i = 0; i < 7; i++) {
    Resize(x_ivector[i],1);
    x_ivector[i] = interval(3*i,-2*i);
    // x_ivector[i] = 2*i;
    // cout << "finished assignment" << endl;
    cout << "x_ivector[" << i << "] = " << x_ivector[i] << endl;
    // if (x_ivector[i]==NULL) {
    //   cout << "NULL @ [" << i << "] component;" << endl;
    //   cout << endl;
    // }
  }
  cout << "length of x_ivector (after assignment) = " << VecLen(*x_ivector) << endl;
  cout << "Lb(x_ivector) = " << Lb(*x_ivector) << endl;
  cout << "Ub(x_ivector) = " << Ub(*x_ivector) << endl;
  delete [] x_ivector; */
  // ********************************************************************************************
  cout << endl;
  // ivector   *x_ivector_ptr;
  ivector   x_ivector_obj(7);
  for (int j = 0; j < 7; j++) {
    x_ivector_obj[j+1] = interval(3*j,-2*j);
  } 
  ivector *x_ivector_ptr = new ivector;
  *x_ivector_ptr = x_ivector_obj;
  cout << "VecLen of x_ivector_obj = " << VecLen(x_ivector_obj) << endl;
  cout << "VecLen of x_ivector_ptr = " << VecLen(*x_ivector_ptr) << endl;
  delete x_ivector_ptr;
  cout << endl;

}
